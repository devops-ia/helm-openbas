# -- Global configuration
global:
  imageRegistry: ""
  # E.g.
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName
  #
  imagePullSecrets: []

# -- Number of replicas
replicaCount: 1

# -- Image registry
image:
  repository: openbas/platform
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# -- String to partially override openbas.fullname template (will maintain the release name)
nameOverride: ""

# -- String to fully override openbas.fullname template
fullnameOverride: ""

# -- Global Docker registry secret names as an array
imagePullSecrets: []

# -- Enable creation of ServiceAccount
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # Specifies if you don't want the kubelet to automatically mount
  # a ServiceAccount's API credentials
  automountServiceAccountToken: false

# -- Enable or disable test connection
testConnection: false

# -- Environment variables to configure application
# </br> Ref: https://docs.openbas.io/latest/deployment/configuration/#platform
env:
  # Plain vars
  # foo: bar
  # my_env: my_value
  # APP OPENBAS
  OPENBAS_ADMIN_EMAIL: admin@openbas.io
  OPENBAS_ADMIN_PASSWORD: ChangeMe
  OPENBAS_ADMIN_TOKEN: ChangeMe
  OPENBAS_AUTH-LOCAL-ENABLE: true
  OPENBAS_BASE-URL: "http://localhost:8080"
  SERVER_ADDRESS: "0.0.0.0"
  SERVER_PORT: 8080
  # CALDERA
  INJECTOR_CALDERA_URL: http://release-name-caldera:8888
  INJECTOR_CALDERA_PUBLIC_URL: http://release-name-caldera:8888
  INJECTOR_CALDERA_API_KEY: ChangeMe
  # MINIO
  MINIO_ENDPOINT: release-name-minio:9000
  # POSTGRESQL
  SPRING_DATASOURCE_URL: jdbc:postgresql://release-name-postgresql:5432/openbas
  SPRING_DATASOURCE_USERNAME: user
  SPRING_DATASOURCE_PASSWORD: ChangeMe
  # RABBITMQ
  OPENBAS_RABBITMQ_HOSTNAME: release-name-rabbitmq
  OPENBAS_RABBITMQ_MANAGEMENT-PORT: 15672
  OPENBAS_RABBITMQ_PORT: 5672
  OPENBAS_RABBITMQ_USER: user
  OPENBAS_RABBITMQ_PASS: ChangeMe

# -- Secrets from variables
envFromSecrets: {}
  # Cipher vars
  # my_env:
  #  name: release-name-credentials
  #  key: secret_key

# -- Secrets values to create credentials and reference by envFromSecrets
secrets: {}

# -- Kubernetes service to expose Pod
service:
  # -- Kubernetes Service type. Allowed values: NodePort, LoadBalancer or ClusterIP
  type: ClusterIP
  # -- Kubernetes Service port
  port: 80
  # -- NodePort port (only when type is NodePort)
  # nodePort: 32000
  # -- Pod expose port
  targetPort: 8080
  # -- Pod extra ports
  # extraPorts:
  # - name: metrics
  #   port: 9080
  #   targetPort: 9080

# -- Configure liveness checker
# </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
livenessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 180
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

# -- Custom livenessProbe
livenessProbeCustom: {}
  # httpGet:
  #   path: /dashboard
  #   port: 4000
  # failureThreshold: 3
  # initialDelaySeconds: 200
  # periodSeconds: 30
  # successThreshold: 1
  # timeoutSeconds: 5

# -- Configure readinessProbe checker
# </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

# -- Custom readinessProbe
readinessProbeCustom: {}
  # httpGet:
  #   path: /dashboard
  #   port: 4000
  # failureThreshold: 3
  # initialDelaySeconds: 200
  # periodSeconds: 30
  # successThreshold: 1
  # timeoutSeconds: 5

# -- Configure startupProbe checker
# </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
startupProbe:
  enabled: true
  failureThreshold: 30
  initialDelaySeconds: 180
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

# -- Custom startupProbe
startupProbeCustom: {}
  # httpGet:
  #   path: /dashboard
  #   port: 4000
  # failureThreshold: 3
  # initialDelaySeconds: 200
  # periodSeconds: 30
  # successThreshold: 1
  # timeoutSeconds: 5

# -- Enable or disable ready-checker
readyChecker:
  enabled: true
  # -- Number of retries before giving up
  retries: 30
  # -- Timeout for each check
  timeout: 5
  # -- List services
  services:
  - name: minio
    port: 9000
  - name: postgresql
    port: 5432
  - name: rabbitmq
    port: 5672

# -- Defines privilege and access control settings for a Pod.
# </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
# </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext: {}
  # fsGroup: 2000

# -- Defines privilege and access control settings for a Container.
# </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
# </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# -- Ingress configuration to expose app
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- The resources limits and requested
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: "1500m"
  #   memory: 2048Mi
  # requests:
  #   cpu: 1
  #   memory: 256Mi

# -- Autoscaling with CPU or memory utilization percentage
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Node labels for pod assignment
nodeSelector: {}

# -- Tolerations for pod assignment
tolerations: []

# -- Affinity for pod assignment
affinity: {}

# -- Collector Global environment
collectorGlobalEnv:
  # Plain vars
  # foo: bar
  # my_env: my_value

# -- Collectors
# </br> Ref: https://github.com/OpenBAS-Platform/collectors
collectors: []
# - name: connector-name
#   enabled: true
#   replicas: 1
#   # -- Image registry
#   image: {}
#     repository:
#     pullPolicy:
#     tag:
#   # -- Environment variables to configure application
#   env: {}
#   # Plain vars
#   # foo: bar
#   # my_env: my_value
#   # -- Deployment annotations
#   deploymentAnnotations: {}
#   # -- Pod annotations
#   podAnnotations: {}
#   # -- Secrets from variables
#   envFromSecrets: {}
#     # Cipher vars
#     # my_env:
#     #  name: release-name-credentials
#     #  key: secret_key
#   # -- The resources limits and requested
#   resources: {}
#     limits:
#       memory: 256Mi
#       cpu: "250m"
#     requests:
#       memory: 56Mi
#       cpu: "50m"
#   # -- Node labels for pod assignment
#   nodeSelector: {}
#     project: "openbas"
#   # -- Tolerations for pod assignment
#   tolerations: []
#     - key: "project"
#       operator: "Equal"
#       value: "openbas"
#       effect: "NoSchedule"
#   # -- Affinity for pod assignment
#   affinity: {}

# -- Injector Global environment
injectorGlobalEnv:
  # Plain vars
  # foo: bar
  # my_env: my_value

# -- Injectors
# </br> Ref: https://github.com/OpenBAS-Platform/injectors
injectors: []
# - name: connector-name
#   enabled: true
#   replicas: 1
#   # -- Image registry
#   image: {}
#     repository:
#     pullPolicy:
#     tag:
#   # -- Environment variables to configure application
#   env: {}
#   # Plain vars
#   # foo: bar
#   # my_env: my_value
#   # -- Deployment annotations
#   deploymentAnnotations: {}
#   # -- Pod annotations
#   podAnnotations: {}
#   # -- Secrets from variables
#   envFromSecrets: {}
#     # Cipher vars
#     # my_env:
#     #  name: release-name-credentials
#     #  key: secret_key
#   # -- The resources limits and requested
#   resources: {}
#     limits:
#       memory: 256Mi
#       cpu: "250m"
#     requests:
#       memory: 56Mi
#       cpu: "50m"
#   # -- Node labels for pod assignment
#   nodeSelector: {}
#     project: "openbas"
#   # -- Tolerations for pod assignment
#   tolerations: []
#     - key: "project"
#       operator: "Equal"
#       value: "openbas"
#       effect: "NoSchedule"
#   # -- Affinity for pod assignment
#   affinity: {}

# -- OpenBAS caldera-server deployment configuration
caldera:
  enabled: true

  # -- Number of replicas
  replicaCount: 1

  # -- Image registry
  image:
    repository: openbas/caldera-server
    pullPolicy: IfNotPresent
    # Fixed with CI/CD updatecli
    tag: 5.0.0

  # -- Ingress configuration to expose app
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- Kubernetes service to expose Pod
  service:
    # -- Kubernetes Service type. Allowed values: NodePort, LoadBalancer or ClusterIP
    type: ClusterIP
    # -- Kubernetes Service port
    port: 8888
    # -- NodePort port (only when type is NodePort)
    # nodePort: 32000
    # -- Pod expose port
    targetPort: 8888

  # -- Environment variables to configure application
  # </br> Ref: https://docs.openbas.io/latest/deployment/configuration/#platform
  env: {}
    # CALDERA_URL: "http://localhost:8080"

  # -- Secrets from variables
  envFromSecrets: {}
    # Cipher vars
    # my_env:
    #  name: release-name-credentials
    #  key: secret_key

  # -- Caldera configuration
  # </br> Ref: https://github.com/OpenBAS-Platform/docker/blob/master/caldera.yml
  config: {}
    # users:
    #   red:
    #     red: ChageMeByUUIDv4                                                      # Change this
    #   blue:
    #     blue: ChageMeByUUIDv4                                                     # Change this
    # api_key_red: ChageMeByUUIDv4                                                  # Change this
    # api_key_blue: ChageMeByUUIDv4                                                 # Change this
    # api_key: ChageMeByUUIDv4                                                      # Change this
    # crypt_salt: ChageMeByUUIDv4                                                   # Change this
    # encryption_key: ChageMeByUUIDv4                                               # Change this
    # app.contact.http: http://caldera.myopenbas.myorganization.com:8888            # Change this
    # app.contact.tcp: 0.0.0.0:7010
    # app.contact.udp: 0.0.0.0:7011
    # app.contact.websocket: 0.0.0.0:7012
    # app.contact.dns.domain: localhost
    # app.contact.dns.socket: 0.0.0.0:53
    # app.contact.gist: API_KEY                                                     # Optional
    # app.contact.html: /weather                                                    # Optional
    # app.contact.slack.api_key: SLACK_TOKEN                                        # Optional
    # app.contact.slack.bot_id: SLACK_BOT_ID                                        # Optional
    # app.contact.slack.channel_id: SLACK_CHANNEL_ID                                # Optional
    # app.contact.tunnel.ssh.host_key_file: REPLACE_WITH_KEY_FILE_PATH              # Optional
    # app.contact.tunnel.ssh.host_key_passphrase: REPLACE_WITH_KEY_FILE_PASSPHRASE  # Optional
    # app.contact.tunnel.ssh.socket: 0.0.0.0:8022
    # app.contact.tunnel.ssh.user_name: sandcat
    # app.contact.tunnel.ssh.user_password: ChageMeByUUIDv4                         # Change this
    # objects.planners.default: atomic
    # requirements:
    #   go:
    #     command: go version
    #     type: installed_program
    #     version: 1.11
    #   python:
    #     attr: version
    #     module: sys
    #     type: python_module
    #     version: 3.8.0
    # host: 0.0.0.0
    # port: 8888
    # ability_refresh: 60
    # plugins:
    #   - access
    #   - atomic
    #   - compass
    #   - debrief
    #   - fieldmanual
    #   - gameboard
    #   - manx
    #   - response
    #   - sandcat
    #   - stockpile
    #   - training

  # -- Defines privilege and access control settings for a Pod.
  # </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  podSecurityContext: {}
    # fsGroup: 2000

  # -- Defines privilege and access control settings for a Container.
  # </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # -- The resources limits and requested
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: "250m"
    #   memory: 256Mi
    # requests:
    #   cpu: "100m"
    #   memory: 56Mi

  # -- Autoscaling with CPU or memory utilization percentage
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- Node labels for pod assignment
  nodeSelector: {}

  # -- Tolerations for pod assignment
  tolerations: []

  # -- Affinity for pod assignment
  affinity: {}

# -- MinIO subchart deployment
# </br> Ref: https://github.com/bitnami/charts/blob/main/bitnami/minio/values.yaml
#
minio:
  # -- Enable or disable MinIO subchart
  enabled: true

  # -- mode Minio server mode (`standalone` or `distributed`)
  # </br> Ref: https://docs.minio.io/docs/distributed-minio-quickstart-guide
  mode: standalone
  # Minio authentication parameters
  auth:
    # -- Minio root username
    rootUser: ChangeMe
    # -- Password for Minio root user
    rootPassword: ChangeMe

  # -- Enable persistence using Persistent Volume Claims
  # </br> Ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  persistence:
    # -- Enable MinIO data persistence using PVC. If false, use emptyDir
    enabled: false

# -- PostgreSQL subchart deployment
# </br> Ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
    # -- Enable or disable PostgreSQL subchart
  enabled: true

  # -- Number of PostgreSQL replicas to deploy
  replicaCount: 1

  # -- PostgreSQL Authentication parameters
  auth:
    # -- PostgreSQL application username
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#environment-variables
    username: user
    # -- PostgreSQL application password
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#environment-variables
    password: ChangeMe
    # -- PostgreSQL application database
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#environment-variables
    database: "openbas"

  # -- Persistence parameters
  persistence:
    # -- Enable PostgreSQL data persistence using PVC
    enabled: false

# -- RabbitMQ subchart deployment
# </br> Ref: https://github.com/bitnami/charts/blob/main/bitnami/rabbitmq/values.yaml
rabbitmq:
    # -- Enable or disable RabbitMQ subchart
  enabled: true

  # -- Number of RabbitMQ replicas to deploy
  replicaCount: 1

  # -- Clustering settings
  clustering:
    # -- Enable RabbitMQ clustering
    enabled: false

  # -- RabbitMQ Authentication parameters
  auth:
    # -- RabbitMQ application username
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    username: user
    # -- RabbitMQ application password
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    password: ChangeMe
    erlangCookie: ChangeMe

  # -- Persistence parameters
  persistence:
    # -- Enable RabbitMQ data persistence using PVC
    enabled: false
