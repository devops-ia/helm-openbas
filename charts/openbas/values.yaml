# -- Global section contains configuration options that are applied to all services
global:
  # -- Specifies the registry to pull images from. Leave empty for the default registry
  imageRegistry: ""
  # -- Specifies the secrets to use for pulling images from private registries
  # Leave empty if no secrets are required
  # E.g.
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName
  imagePullSecrets: []

# -- String to fully override openbas.fullname template
fullnameOverride: ""

# -- String to partially override openbas.fullname template (will maintain the release name)
nameOverride: ""

# -- Number of replicas for the service
replicaCount: 1

# -- Image registry configuration for the base service
image:
  # -- Repository of the image
  repository: openbas/platform
  # -- Pull policy for the image
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion
  tag: ""

# -- Specifies the secrets to use for pulling images from private registries
# Leave empty if no secrets are required
# E.g.
# imagePullSecrets:
#   - name: myRegistryKeySecretName
imagePullSecrets: []

# -- Configure strategy for the deployment
strategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxUnavailable: 1

# -- Enable creation of ServiceAccount
serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- Name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # -- Specifies if you don't want the kubelet to automatically mount a ServiceAccount API credentials
  automountServiceAccountToken: false

# -- Enable or disable test connection
testConnection: false

# -- Environment variables to configure application
# </br> Ref: https://docs.openbas.io/latest/deployment/configuration/#platform
env:
  # APP OPENBAS
  OPENBAS_ADMIN_EMAIL: admin@openbas.io
  OPENBAS_ADMIN_PASSWORD: ChangeMe
  OPENBAS_ADMIN_TOKEN: ChangeMe
  OPENBAS_AUTH-LOCAL-ENABLE: true
  OPENBAS_BASE-URL: "http://localhost:8080"
  SERVER_ADDRESS: "0.0.0.0"
  SERVER_PORT: 8080
  # CALDERA
  INJECTOR_CALDERA_URL: http://release-name-caldera:8888
  INJECTOR_CALDERA_PUBLIC_URL: http://release-name-caldera:8888
  INJECTOR_CALDERA_API_KEY: ChangeMe
  # MINIO
  MINIO_ENDPOINT: release-name-minio:9000
  # POSTGRESQL
  SPRING_DATASOURCE_URL: jdbc:postgresql://release-name-postgresql:5432/openbas
  SPRING_DATASOURCE_USERNAME: user
  SPRING_DATASOURCE_PASSWORD: ChangeMe
  # RABBITMQ
  OPENBAS_RABBITMQ_HOSTNAME: release-name-rabbitmq
  OPENBAS_RABBITMQ_MANAGEMENT-PORT: 15672
  OPENBAS_RABBITMQ_PORT: 5672
  OPENBAS_RABBITMQ_USER: user
  OPENBAS_RABBITMQ_PASS: ChangeMe

# -- Variables from configMap
envFromConfigMap: {}
# MY_VARIABLE:
#  name: <name-configmap>
#  key: key

# -- Variables from secrets
envFromSecrets: {}
# MY_VARIABLE:
#  name: <name-secret>
#  key: secret_key

# -- Load all variables from files
# </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
envFromFiles: []
# - secretRef:
#     name: <name-secret>
# - configMapRef:
#     name: <name-configmap>

# -- Secrets values to create credentials and reference by envFromSecrets
# Generate Secret with following name: <release-name>-<name>
# </br> Ref: https://kubernetes.io/docs/concepts/configuration/secret/
secrets: []
  # - name: secret-name
  #   data:
  #     my.key: |-
  #       my-content
  #     my_var: my-value

# -- ConfigMap values to create configuration files
# Generate ConfigMap with following name: <release-name>-<name>
# </br> Ref: https://kubernetes.io/docs/concepts/configuration/configmap/
configMaps: []
  # - name: configmap-name
  #   data:
  #     my.key: |-
  #       my-content
  #     my_var: my-value

# -- Configure additional containers
# </br> Ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
initContainers: []
# - name: my-container
#   image: busybox
#   command: ['sh', '-c', 'echo "Hello, World!"']

# -- Configure args
# </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
args: []
# - -c
# - echo "Hello, World!"

# -- Configure command
# </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
command: []
# - echo
# - "Hello, World!"

# -- Kubernetes service to expose Pod
# </br> Ref: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # -- Kubernetes Service type. Allowed values: NodePort, LoadBalancer, ClusterIP, ExternalName
  type: ClusterIP
  # -- Kubernetes Service port
  port: 80
  # -- Pod expose port
  targetPort: 8080
  # -- Protocol for the service port
  protocol: TCP
  # -- Name for the service port
  portName: http
  # -- Application protocol (HTTP, HTTPS, etc.)
  appProtocol: HTTP
  # -- NodePort port (only when type is NodePort or LoadBalancer)
  # nodePort: 32000
  # -- Specific cluster IP (use "None" for headless service)
  # clusterIP: "10.96.0.1"
  # -- List of cluster IPs for dual-stack
  # clusterIPs:
  #   - "10.96.0.1"
  #   - "fd00::1"
  # -- External IPs for the service
  # externalIPs:
  #   - "192.168.1.100"
  # -- LoadBalancer specific configuration
  loadBalancer: {}
    # -- LoadBalancer IP (only for LoadBalancer type)
    # ip: "192.168.1.100"
    # -- LoadBalancer source ranges (CIDR blocks)
    # sourceRanges:
    #   - "10.0.0.0/8"
    #   - "172.16.0.0/12"
    # -- LoadBalancer class
    # class: "nginx"
    # -- Allocate NodePorts for LoadBalancer service
    # allocateNodePorts: true
  # -- External name for ExternalName type service
  # externalName: "example.com"
  # -- External traffic policy (Local or Cluster)
  # externalTrafficPolicy: Local
  # -- Internal traffic policy (Local or Cluster)
  # internalTrafficPolicy: Local
  # -- Health check node port (for LoadBalancer with externalTrafficPolicy: Local)
  # healthCheckNodePort: 30000
  # -- Publish not ready addresses
  # publishNotReadyAddresses: false
  # -- Session affinity (None or ClientIP)
  # sessionAffinity: ClientIP
  # -- Session affinity configuration
  # sessionAffinityConfig:
  #   clientIP:
  #     timeoutSeconds: 10800
  # -- IP families (IPv4, IPv6)
  # ipFamilies:
  #   - IPv4
  #   - IPv6
  # -- IP family policy (SingleStack, PreferDualStack, RequireDualStack)
  # ipFamilyPolicy: SingleStack
  # -- Traffic distribution (PreferClose)
  # trafficDistribution: PreferClose
  # -- Additional labels for the service
  labels: {}
  #  environment: production
  #  team: platform
  # -- Annotations for the service
  annotations: {}
  #   service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
  #   nginx.ingress.kubernetes.io/service-upstream: "true"
  # -- Pod extra ports
  extraPorts: []
  #  - name: admin
  #    port: 9090
  #    targetPort: 9090
  #    protocol: TCP
  #    appProtocol: HTTP
  #    nodePort: 32001  # Only for NodePort/LoadBalancer
  #  - name: grpc
  #    port: 9000
  #    targetPort: 9000
  #    protocol: TCP
  #    appProtocol: GRPC

# -- NetworkPolicy configuration
# </br> Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy:
  # -- Enable or disable NetworkPolicy
  enabled: false
  # -- Policy types
  policyTypes: []
    # - Ingress
    # - Egress
  ingress: []
    # - from:
    #   - ipBlock:
    #       cidr: 172.17.0.0/16
    #       except:
    #       - 172.17.1.0/24
    #   - namespaceSelector:
    #       matchLabels:
    #         nodepool: mynodepool
    #   - podSelector:
    #       matchLabels:
    #         role: frontend
    #   ports:
    #   - protocol: TCP
    #     port: 6379
  egress: []
    # - to:
    #   - ipBlock:
    #       cidr: 10.0.0.0/24
    #   ports:
    #   - protocol: TCP
    #     port: 5978

# -- Configure lifecycle hooks
# </br> Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
# </br> Ref: https://learnk8s.io/graceful-shutdown
lifecycle: {}
# preStop:
#   exec:
#     command: ["sh", "-c", "sleep 10"]

# -- Configure Pod termination grace period
# </br> Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination
terminationGracePeriodSeconds: 30

# -- Configure liveness checker
# </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
livenessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 180
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

# -- Custom livenessProbe
livenessProbeCustom: {}
# httpGet:
#   path: /api/health
#   port: 8080
# failureThreshold: 3
# initialDelaySeconds: 200
# periodSeconds: 30
# successThreshold: 1
# timeoutSeconds: 5

# -- Configure readinessProbe checker
# </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

# -- Custom readinessProbe
readinessProbeCustom: {}
# httpGet:
#   path: /api/health
#   port: 8080
# failureThreshold: 3
# initialDelaySeconds: 200
# periodSeconds: 30
# successThreshold: 1
# timeoutSeconds: 5

# -- Configure startupProbe checker
# </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
startupProbe:
  enabled: true
  failureThreshold: 30
  initialDelaySeconds: 180
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5

# -- Custom startupProbe
startupProbeCustom: {}
# httpGet:
#   path: /api/health
#   port: 8080
# failureThreshold: 3
# initialDelaySeconds: 200
# periodSeconds: 30
# successThreshold: 1
# timeoutSeconds: 5

# -- Enable or disable ready-checker
readyChecker:
  # -- Enable or disable ready-checker
  enabled: false
  # -- Repository of the image
  repository: busybox
  # -- Pull policy for the image
  pullPolicy: IfNotPresent
  # -- Overrides the image tag
  tag: latest
  # -- Number of retries before giving up
  retries: 30
  # -- Timeout for each check
  timeout: 5
  # -- List services
  services:
  # - name: service_name
  #   port: service_port
  #   address: service_address  # (Optional) This parameter is optional. If
  #   not specified, the address for the check will be automatically
  #   determined assuming the service was installed using a subchart. It is
  #   useful to specify it when the service is provisioned differently (e.g.,
  #   an S3 bucket created in the Cloud or an Elasticsearch instance outside
  #   the Kubernetes cluster). The address can be an IP address or a DNS name.
  - name: minio
    port: 9000
  - name: postgresql
    port: 5432
  - name: rabbitmq
    port: 5672

# -- Configure annotations on Pods
podAnnotations: {}

# -- Configure labels on Pods
podLabels: {}

# -- Defines privilege and access control settings for a Pod
# </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
# </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext: {}
# fsGroup: 2000

# -- Defines privilege and access control settings for a Container
# </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
# </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# -- Ingress configuration to expose app
# </br> Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- The resources limits and requested
# </br> Ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources: {}
  # limits:
  #   cpu: "1500m"
  #   memory: 2048Mi
  # requests:
  #   cpu: 1
  #   memory: 256Mi

# -- Pod Disruption Budget
# </br> Ref: https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/
podDisruptionBudget:
  enabled: false
  maxUnavailable: 1
  # minAvailable: 0

# -- Autoscaling with CPU or memory utilization percentage
# </br> Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Additional volumes on the output Deployment definition
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# -- Additional volumeMounts on the output Deployment definition
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# -- Node labels for pod assignment
# </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
nodeSelector: {}

# -- Tolerations for pod assignment
# </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
tolerations: []

# -- Affinity for pod assignment
# </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

# -- Control how Pods are spread across your cluster
# </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/#example-multiple-topologyspreadconstraints
topologySpreadConstraints: []
# - maxSkew: 1
#   topologyKey: zone
#   whenUnsatisfiable: DoNotSchedule

# -- Configure DNS
# </br> Ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
dnsConfig: {}
# nameservers:
#   - 1.2.3.4
#   - 5.6.7.8
# searches:
#   - ns1.svc.cluster.local
#   - my.dns.search.suffix
# option:
#   - name: ndots
#     value: "2"
#   - name: edns0
#   - name: timeout
#     value: "3"

# -- Configure DNS policy
# Options: ClusterFirst, Default, ClusterFirstWithHostNet, None
# </br> Ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
dnsPolicy: ClusterFirst

# -- Collector global configuration
collectorsGlobal:

  # -- Additional environment variables on the output connector definition
  env: {}
  # MY_VARIABLE: my_value

  # -- Variables from secrets
  envFromSecrets: {}
  # MY_VARIABLE:
  #   name: <name-secret>
  #   key: secret_key

  # -- Variables from configMap
  envFromConfigMap: {}
  # MY_VARIABLE:
  #   name: <name-configmap>
  #   key: key

  # -- Load all variables from files
  envFromFiles: []
  # - secretRef:
  #     name: <name-secret>
  # - configMapRef:
  #     name: <name-configmap>

  # -- Additional volumes on the output connector Deployment definition
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # -- Additional volumeMounts on the output connector Deployment definition
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

# -- Collectors
# </br> Ref: https://github.com/OpenBAS-Platform/collectors
collectors: []
# Example collector configuration
# - name: collector-name # Required: unique name
#   enabled: true        # Enable the collector
#   replicas: 1          # Number of pods
#
#   # Image configuration
#   image:
#     # repository: ""
#     # pullPolicy: IfNotPresent
#     # tag: ""
#
#   # ServiceAccount (create=false to use existing)
#   serviceAccount: {}
#     # create: true
#     # name: ""
#     # automountServiceAccountToken: false
#
#   # Basic deployment metadata
#   deploymentAnnotations: {}
#   podAnnotations: {}
#   podLabels: {}
#
#   # Environment and configuration
#   env: {}
#     # MY_ENV: my_value
#   envFromSecrets: {}
#     # MY_SECRET_VAR:
#     #   name: <secret-name>
#     #   key: secret_key
#   envFromConfigMap: {}
#     # MY_CONFIG_VAR:
#     #   name: <configmap-name>
#     #   key: key
#   envFromFiles: []
#     # - secretRef:
#     #     name: <name-secret>
#     # - configMapRef:
#     #     name: <name-configmap>
#
#   # Volumes and mounts
#   volumes: []
#     # - name: foo
#     #   secret:
#     #     secretName: mysecret
#     #     optional: false
#   volumeMounts: []
#     # - name: foo
#     #   mountPath: "/etc/foo"
#     #   readOnly: true
#
#   # Resources and scheduling
#   resources: {}
#     # limits:
#     #   memory: 256Mi
#     #   cpu: "250m"
#     # requests:
#     #   memory: 56Mi
#     #   cpu: "50m"
#   nodeSelector: {}
#   tolerations: []
#     # - key: "nodepool"
#     #   operator: "Equal"
#     #   value: "openbas"
#     #   effect: "NoSchedule"
#   affinity: {}
#   topologySpreadConstraints: []
#     # - maxSkew: 1
#     #   topologyKey: zone
#     #   whenUnsatisfiable: DoNotSchedule
#
#   # DNS and network policy related
#   dnsConfig: {}
#     # nameservers:
#     #   - 1.2.3.4
#     # searches:
#     #   - ns1.svc.cluster.local
#     # option:
#     #   - name: ndots
#     #     value: "2"
#   dnsPolicy: ClusterFirst
#
#   # Lifecycle / termination
#   lifecycle: {}
#     # preStop:
#     #   exec:
#     #     command: ["sh", "-c", "sleep 10"]
#   terminationGracePeriodSeconds: 30
#
#   # Optional ready checker to wait for external services
#   readyChecker: {}
#     # enabled: true
#     # repository: busybox
#     # pullPolicy: IfNotPresent
#     # tag: latest
#     # retries: 30
#     # timeout: 5
#     # services:
#     # - name: service_name
#     #   port: service_port
#     #   address: service_address  # (Optional) This parameter is optional. If
#     #   not specified, the address for the check will be automatically
#     #   determined assuming the service was installed using a subchart. It is
#     #   useful to specify it when the service is provisioned differently (e.g.,
#     #   an S3 bucket created in the Cloud or an Elasticsearch instance outside
#     #   the Kubernetes cluster). The address can be an IP address or a DNS name.
#
#   # Deployment strategy (rolling update, etc.)
#   strategy: {}
#     # type: RollingUpdate
#     # rollingUpdate:
#     #   maxUnavailable: 1

# -- Injector global configuration
injectorsGlobal:

  # -- Additional environment variables on the output connector definition
  env: {}
  # MY_VARIABLE: my_value

  # -- Variables from secrets
  envFromSecrets: {}
  # MY_VARIABLE:
  #   name: <name-secret>
  #   key: secret_key

  # -- Variables from configMap
  envFromConfigMap: {}
  # MY_VARIABLE:
  #   name: <name-configmap>
  #   key: key

  # -- Load all variables from files
  envFromFiles: []
  # - secretRef:
  #     name: <name-secret>
  # - configMapRef:
  #     name: <name-configmap>

  # -- Additional volumes on the output connector Deployment definition
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # -- Additional volumeMounts on the output connector Deployment definition
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

# -- Injectors
# </br> Ref: https://github.com/OpenBAS-Platform/injectors
injectors: []
# Example injector configuration
# - name: injector-name # Required: unique name
#   enabled: true       # Enable the injector
#   replicas: 1         # Number of pods
#
#   # Image configuration
#   image:
#     # repository: ""
#     # pullPolicy: IfNotPresent
#     # tag: ""
#
#   # ServiceAccount (create=false to use existing)
#   serviceAccount: {}
#     # create: true
#     # name: ""
#     # automountServiceAccountToken: false
#
#   # Basic deployment metadata
#   deploymentAnnotations: {}
#   podAnnotations: {}
#   podLabels: {}
#
#   # Environment and configuration
#   env: {}
#     # MY_ENV: my_value
#   envFromSecrets: {}
#     # MY_SECRET_VAR:
#     #   name: <secret-name>
#     #   key: secret_key
#   envFromConfigMap: {}
#     # MY_CONFIG_VAR:
#     #   name: <configmap-name>
#     #   key: key
#   envFromFiles: []
#     # - secretRef:
#     #     name: <name-secret>
#     # - configMapRef:
#     #     name: <name-configmap>
#
#   # Volumes and mounts
#   volumes: []
#     # - name: foo
#     #   secret:
#     #     secretName: mysecret
#     #     optional: false
#   volumeMounts: []
#     # - name: foo
#     #   mountPath: "/etc/foo"
#     #   readOnly: true
#
#   # Resources and scheduling
#   resources: {}
#     # limits:
#     #   memory: 256Mi
#     #   cpu: "250m"
#     # requests:
#     #   memory: 56Mi
#     #   cpu: "50m"
#   nodeSelector: {}
#   tolerations: []
#     # - key: "nodepool"
#     #   operator: "Equal"
#     #   value: "openbas"
#     #   effect: "NoSchedule"
#   affinity: {}
#   topologySpreadConstraints: []
#     # - maxSkew: 1
#     #   topologyKey: zone
#     #   whenUnsatisfiable: DoNotSchedule
#
#   # DNS and network policy related
#   dnsConfig: {}
#     # nameservers:
#     #   - 1.2.3.4
#     # searches:
#     #   - ns1.svc.cluster.local
#     # option:
#     #   - name: ndots
#     #     value: "2"
#   dnsPolicy: ClusterFirst
#
#   # Lifecycle / termination
#   lifecycle: {}
#     # preStop:
#     #   exec:
#     #     command: ["sh", "-c", "sleep 10"]
#   terminationGracePeriodSeconds: 30
#
#   # Optional ready checker to wait for external services
#   readyChecker: {}
#     # enabled: true
#     # repository: busybox
#     # pullPolicy: IfNotPresent
#     # tag: latest
#     # retries: 30
#     # timeout: 5
#     # services:
#     # - name: service_name
#     #   port: service_port
#     #   address: service_address  # (Optional) This parameter is optional. If
#     #   not specified, the address for the check will be automatically
#     #   determined assuming the service was installed using a subchart. It is
#     #   useful to specify it when the service is provisioned differently (e.g.,
#     #   an S3 bucket created in the Cloud or an Elasticsearch instance outside
#     #   the Kubernetes cluster). The address can be an IP address or a DNS name.
#
#   # Deployment strategy (rolling update, etc.)
#   strategy: {}
#     # type: RollingUpdate
#     # rollingUpdate:
#     #   maxUnavailable: 1

# -- OpenBAS caldera-server deployment configuration
caldera:
  # -- Enable or disable Caldera server
  enabled: true

  # -- Number of replicas for the service
  replicaCount: 1

  # -- Image registry configuration for the base service
  image:
    # -- Repository of the image
    repository: openbas/caldera-server
    # -- Pull policy for the image
    pullPolicy: IfNotPresent
    # -- Overrides the image tag whose default is the chart appVersion
    tag: 5.1.0

  # -- Specifies the secrets to use for pulling images from private registries
  # Leave empty if no secrets are required
  # E.g.
  # imagePullSecrets:
  #   - name: myRegistryKeySecretName
  imagePullSecrets: []

  # -- Configure strategy for the deployment
  strategy: {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxUnavailable: 1

  # -- Configure annotations on Pods
  podAnnotations: {}

  # -- Configure labels on Pods
  podLabels: {}

  # -- Defines privilege and access control settings for a Pod
  # </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  podSecurityContext: {}
    # fsGroup: 2000

  # -- Defines privilege and access control settings for a Container
  # </br> Ref: https://kubernetes.io/docs/concepts/security/pod-security-standards/
  # </br> Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  # -- Configure additional containers
  # </br> Ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
  initContainers: []
    # - name: my-container
    #   image: busybox
    #   command: ['sh', '-c', 'echo "Hello, World!"']

  # -- Configure args
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
  args: []
    # - -c
    # - echo "Hello, World!"

  # -- Configure command
  # </br> Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/
  command: []
    # - echo
    # - "Hello, World!"

  # -- Environment variables to configure application
  # </br> Ref: https://docs.openbas.io/latest/deployment/configuration/#platform
  env: {}
  # CALDERA_URL: "http://localhost:8080"

  # -- Secrets from variables
  envFromSecrets: {}
  # MY_VARIABLE:
  #  name: release-name-credentials
  #  key: secret_key

  # -- Caldera configuration
  # </br> Ref: https://github.com/OpenBAS-Platform/docker/blob/master/caldera.yml
  config: {}
  # users:
  #   red:
  #     red: ChageMeByUUIDv4                                                      # Change this
  #   blue:
  #     blue: ChageMeByUUIDv4                                                     # Change this
  # api_key_red: ChageMeByUUIDv4                                                  # Change this
  # api_key_blue: ChageMeByUUIDv4                                                 # Change this
  # api_key: ChageMeByUUIDv4                                                      # Change this
  # crypt_salt: ChageMeByUUIDv4                                                   # Change this
  # encryption_key: ChageMeByUUIDv4                                               # Change this
  # app.contact.http: http://caldera.myopenbas.myorganization.com:8888            # Change this
  # app.contact.tcp: 0.0.0.0:7010
  # app.contact.udp: 0.0.0.0:7011
  # app.contact.websocket: 0.0.0.0:7012
  # app.contact.dns.domain: localhost
  # app.contact.dns.socket: 0.0.0.0:53
  # app.contact.gist: API_KEY                                                     # Optional
  # app.contact.html: /weather                                                    # Optional
  # app.contact.slack.api_key: SLACK_TOKEN                                        # Optional
  # app.contact.slack.bot_id: SLACK_BOT_ID                                        # Optional
  # app.contact.slack.channel_id: SLACK_CHANNEL_ID                                # Optional
  # app.contact.tunnel.ssh.host_key_file: REPLACE_WITH_KEY_FILE_PATH              # Optional
  # app.contact.tunnel.ssh.host_key_passphrase: REPLACE_WITH_KEY_FILE_PASSPHRASE  # Optional
  # app.contact.tunnel.ssh.socket: 0.0.0.0:8022
  # app.contact.tunnel.ssh.user_name: sandcat
  # app.contact.tunnel.ssh.user_password: ChageMeByUUIDv4                         # Change this
  # objects.planners.default: atomic
  # requirements:
  #   go:
  #     command: go version
  #     type: installed_program
  #     version: 1.11
  #   python:
  #     attr: version
  #     module: sys
  #     type: python_module
  #     version: 3.8.0
  # host: 0.0.0.0
  # port: 8888
  # ability_refresh: 60
  # plugins:
  #   - access
  #   - atomic
  #   - compass
  #   - debrief
  #   - fieldmanual
  #   - gameboard
  #   - manx
  #   - response
  #   - sandcat
  #   - stockpile
  #   - training

  # -- Configure lifecycle hooks
  # </br> Ref: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/
  # </br> Ref: https://learnk8s.io/graceful-shutdown
  lifecycle: {}
  # preStop:
  #   exec:
  #     command: ["sh", "-c", "sleep 10"]

  # -- Configure Pod termination grace period
  # </br> Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination
  terminationGracePeriodSeconds: 30

  # -- Ingress configuration to expose app
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: false
    className: ""
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # -- Kubernetes service to expose Pod
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # -- Kubernetes Service type. Allowed values: NodePort, LoadBalancer, ClusterIP, ExternalName
    type: ClusterIP
    # -- Kubernetes Service port
    port: 8888
    # -- Pod expose port
    targetPort: 8888
    # -- Protocol for the service port
    protocol: TCP
    # -- Name for the service port
    portName: http
    # -- Application protocol (HTTP, HTTPS, etc.)
    appProtocol: HTTP
    # -- NodePort port (only when type is NodePort or LoadBalancer)
    # nodePort: 32000
    # -- Specific cluster IP (use "None" for headless service)
    # clusterIP: "10.96.0.1"
    # -- List of cluster IPs for dual-stack
    # clusterIPs:
    #   - "10.96.0.1"
    #   - "fd00::1"
    # -- External IPs for the service
    # externalIPs:
    #   - "192.168.1.100"
    # -- LoadBalancer specific configuration
    loadBalancer: {}
      # -- LoadBalancer IP (only for LoadBalancer type)
      # ip: "192.168.1.100"
      # -- LoadBalancer source ranges (CIDR blocks)
      # sourceRanges:
      #   - "10.0.0.0/8"
      #   - "172.16.0.0/12"
      # -- LoadBalancer class
      # class: "nginx"
      # -- Allocate NodePorts for LoadBalancer service
      # allocateNodePorts: true
    # -- External name for ExternalName type service
    # externalName: "example.com"
    # -- External traffic policy (Local or Cluster)
    # externalTrafficPolicy: Local
    # -- Internal traffic policy (Local or Cluster)
    # internalTrafficPolicy: Local
    # -- Health check node port (for LoadBalancer with externalTrafficPolicy: Local)
    # healthCheckNodePort: 30000
    # -- Publish not ready addresses
    # publishNotReadyAddresses: false
    # -- Session affinity (None or ClientIP)
    # sessionAffinity: ClientIP
    # -- Session affinity configuration
    # sessionAffinityConfig:
    #   clientIP:
    #     timeoutSeconds: 10800
    # -- IP families (IPv4, IPv6)
    # ipFamilies:
    #   - IPv4
    #   - IPv6
    # -- IP family policy (SingleStack, PreferDualStack, RequireDualStack)
    # ipFamilyPolicy: SingleStack
    # -- Traffic distribution (PreferClose)
    # trafficDistribution: PreferClose
    # -- Additional labels for the service
    labels: {}
    #  environment: production
    #  team: platform
    # -- Annotations for the service
    annotations: {}
    #   service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    #   nginx.ingress.kubernetes.io/service-upstream: "true"
    # -- Pod extra ports
    extraPorts: []
    #  - name: admin
    #    port: 9090
    #    targetPort: 9090
    #    protocol: TCP
    #    appProtocol: HTTP
    #    nodePort: 32001  # Only for NodePort/LoadBalancer
    #  - name: grpc
    #    port: 9000
    #    targetPort: 9000
    #    protocol: TCP
    #    appProtocol: GRPC

  # -- NetworkPolicy configuration
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  networkPolicy:
    # -- Enable or disable NetworkPolicy
    enabled: false
    # -- Policy types
    policyTypes: []
    # - Ingress
    # - Egress
    ingress: []
    # - from:
    #   - ipBlock:
    #       cidr: 172.17.0.0/16
    #       except:
    #       - 172.17.1.0/24
    #   - namespaceSelector:
    #       matchLabels:
    #         nodepool: mynodepool
    #   - podSelector:
    #       matchLabels:
    #         role: frontend
    #   ports:
    #   - protocol: TCP
    #     port: 6379
    egress: []
    # - to:
    #   - ipBlock:
    #       cidr: 10.0.0.0/24
    #   ports:
    #   - protocol: TCP
    #     port: 5978

  # -- The resources limits and requested
  # </br> Ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'
  # limits:
  #   cpu: "250m"
  #   memory: 256Mi
  # requests:
  #   cpu: "100m"
  #   memory: 56Mi

  # -- Pod Disruption Budget
  # </br> Ref: https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/pod-disruption-budget-v1/
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
    # minAvailable: 0

  # -- Autoscaling with CPU or memory utilization percentage
  # </br> Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # -- Additional volumes on the output Deployment definition
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # -- Additional volumeMounts on the output Deployment definition
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  # -- Node labels for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  nodeSelector: {}

  # -- Tolerations for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []

  # -- Affinity for pod assignment
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  # -- Control how Pods are spread across your cluster
  # </br> Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/#example-multiple-topologyspreadconstraints
  topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: zone
  #   whenUnsatisfiable: DoNotSchedule

  # -- Configure DNS
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  dnsConfig: {}
  # nameservers:
  #   - 1.2.3.4
  #   - 5.6.7.8
  # searches:
  #   - ns1.svc.cluster.local
  #   - my.dns.search.suffix
  # option:
  #   - name: ndots
  #     value: "2"
  #   - name: edns0
  #   - name: timeout
  #     value: "3"

  # -- Configure DNS policy
  # Options: ClusterFirst, Default, ClusterFirstWithHostNet, None
  # </br> Ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
  dnsPolicy: ClusterFirst

# -- OpenSearch subchart deployment
# </br> Ref: https://github.com/opensearch-nodepool/helm-charts/blob/main/charts/opensearch/values.yaml
opensearch:
  # -- Enable or disable OpenSearch subchart
  enabled: true

  # OpenSearch Java options
  opensearchJavaOpts: "-Xmx512M -Xms512M"

  # If discovery.type in the opensearch configuration is set to "single-node",
  # this should be set to "true"
  # If "true", replicas will be forced to 1
  singleNode: true

  # Enable persistence using Persistent Volume Claims
  # </br> Ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  persistence:
    enabled: false

# -- MinIO subchart deployment
# </br> Ref: https://github.com/minio/minio/blob/main/helm/minio/values.yaml
minio:
  # -- Enable or disable MinIO subchart
  enabled: true

  # mode Minio server mode (`standalone` or `distributed`)
  # </br> Ref: https://docs.minio.io/docs/distributed-minio-quickstart-guide
  mode: standalone

  # Minio root username
  rootUser: ChangeMe
  # Password for Minio root user
  rootPassword: ChangeMe

  # Enable persistence using Persistent Volume Claims
  # </br> Ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  persistence:
    # Enable MinIO data persistence using PVC. If false, use emptyDir
    enabled: false

  # Resources
  resources:
    requests:
      memory: 512Mi

# -- PostgreSQL subchart deployment
# </br> Ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
postgresql:
  # -- Enable or disable PostgreSQL subchart
  enabled: true

  # Number of PostgreSQL replicas to deploy
  replicaCount: 1

  # PostgreSQL image
  image:
    repository: bitnamilegacy/postgresql
    tag: 17.6.0-debian-12-r4

  # PostgreSQL Authentication parameters
  auth:
    # PostgreSQL application username
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#environment-variables
    username: user
    # PostgreSQL application password
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#environment-variables
    password: ChangeMe
    # PostgreSQL application database
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/postgresql#environment-variables
    database: "openbas"

  # PostgreSQL Configuration parameters
  primary:
    # Persistence parameters
    persistence:
      # Enable PostgreSQL data persistence using PVC
      enabled: false

# -- RabbitMQ subchart deployment
# </br> Ref: https://github.com/bitnami/charts/blob/main/bitnami/rabbitmq/values.yaml
rabbitmq:
  # -- Enable or disable RabbitMQ subchart
  enabled: true

  # RabbitMQ global settings
  global:
    security:
      allowInsecureImages: true

  # RabbitMQ image
  image:
    repository: bitnamilegacy/rabbitmq
    tag: 4.1.2-debian-12-r1

  # Number of RabbitMQ replicas to deploy
  replicaCount: 1

  # Clustering settings
  clustering:
    # Enable RabbitMQ clustering
    enabled: false

  # RabbitMQ Authentication parameters
  auth:
    # RabbitMQ application username
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    username: user
    # RabbitMQ application password
    # </br> Ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    password: ChangeMe
    erlangCookie: ChangeMe

  # Persistence parameters
  persistence:
    # Enable RabbitMQ data persistence using PVC
    enabled: false
