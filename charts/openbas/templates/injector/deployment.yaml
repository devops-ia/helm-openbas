{{- $appAdminToken := "" -}}
{{- range .Values.secrets -}}
  {{- if and (hasKey .data "OPENBAS_ADMIN_TOKEN") (not $appAdminToken) -}}
    {{- $appAdminToken = index .data "OPENBAS_ADMIN_TOKEN" -}}
  {{- end -}}
{{- end -}}
{{- if and (hasKey .Values.env "OPENBAS_ADMIN_TOKEN") (not $appAdminToken) -}}
  {{- $appAdminToken = .Values.env.OPENBAS_ADMIN_TOKEN -}}
{{- end -}}

{{- $injectorsGlobal := .Values.injectorsGlobal }}
{{- range .Values.injectors }}
{{- $injectorName := .name }}

{{- if .enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "openbas.fullname" $ }}-{{ $injectorName }}-injector
  {{- with .deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    openbas.injector: {{ $injectorName }}
    {{- include "openbas.labels" $ | nindent 4 }}
spec:
  {{- if not .autoscaling }}
  replicas: {{ .replicas }}
  {{- end }}
  {{- with .strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      openbas.injector: {{ $injectorName }}
      {{- include "openbas.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      {{- with .podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        openbas.injector: {{ $injectorName }}
        {{- include "openbas.selectorLabels" $ | nindent 8 }}
        {{- with .podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .imagePullSecrets | nindent 8 }}
      {{- else if $.Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $.Values.global.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- if .serviceAccount }}
      serviceAccountName: {{ if and .serviceAccount (hasKey .serviceAccount "name") }}{{ .serviceAccount.name }}{{ else }}{{ $injectorName }}-injector-{{ include "openbas.fullname" $ }}{{ end }}
      {{- end }}
      securityContext:
        {{- toYaml .podSecurityContext | nindent 8 }}
      {{- if and .readyChecker (hasKey .readyChecker "enabled") }}
      {{- if .readyChecker.enabled }}
      initContainers:
        - name: ready-checker-server
          {{- if $.Values.global.imageRegistry }}
          image: "{{ $.Values.global.imageRegistry }}/{{ .readyChecker.image | default "busybox" }}:{{ .readyChecker.tag | default "latest" }}"
          {{- else }}
          image: {{ .readyChecker.repository | default "busybox" }}:{{ .readyChecker.tag | default "latest" }}
          imagePullPolicy: {{ .readyChecker.pullPolicy | default "IfNotPresent" }}
          {{- end }}
          command:
            - 'sh'
            - '-c'
            - >
              RETRY=0;
              until [ $RETRY -eq {{ .readyChecker.retries }} ];
              do
                if nc -zv {{ $.Values.fullnameOverride | default (include "openbas.fullname" $) }}-server {{ $.Values.service.port }}; then
                  echo "Service {{ $.Values.fullnameOverride | default (include "openbas.fullname" $) }}-server:{{ $.Values.service.port }} is ready";
                  exit 0;
                fi;
                echo "[$RETRY/{{ .readyChecker.retries }}] waiting service {{ $.Values.fullnameOverride | default (include "openbas.fullname" $) }}-server:{{ $.Values.service.port }} is ready";
                sleep {{ .readyChecker.timeout }};
                RETRY=$(($RETRY + 1));
                if [ $RETRY -eq {{ .readyChecker.retries }} ]; then
                  echo "Service {{ $.Values.fullnameOverride | default (include "openbas.fullname" $) }}-server:{{ $.Values.service.port }} did not become ready after {{ .readyChecker.retries }} retries";
                  exit 1;
                fi;
              done
        {{- range $service := .readyChecker.services }}
        - name: ready-checker-{{ $service.name }}
          {{- if $.Values.global.imageRegistry }}
          image: "{{ $.Values.global.imageRegistry }}/{{ $.Values.readyChecker.repository }}:{{ $.Values.readyChecker.tag }}"
          {{- else }}
          image: {{ $.Values.readyChecker.repository }}:{{ $.Values.readyChecker.tag }}
          {{- end }}
          imagePullPolicy: {{ $.Values.readyChecker.pullPolicy }}
          command:
            - 'sh'
            - '-c'
            - |
              RETRY=0;
              until [ $RETRY -eq {{ $.readyChecker.retries }} ];
              do
                ADDRESS="{{ if $service.address }}{{ $service.address }}{{ else }}{{ $.Values.fullnameOverride | default $.Release.Name }}-{{ $service.name }}{{ end }}";
                if nc -zv $ADDRESS {{ $service.port }}; then
                  echo "Service {{ $service.name }} with address $ADDRESS:{{ $service.port }} is ready";
                  exit 0;
                fi;
                echo "[$RETRY/{{ $.readyChecker.retries }}] waiting for service {{ $service.name }} with address $ADDRESS:{{ $service.port }} to become ready";
                sleep {{ $.readyChecker.timeout }};
                RETRY=$(($RETRY + 1));
                if [ $RETRY -eq {{ $.readyChecker.retries }} ]; then
                  echo "Service {{ $service.name }} with address $ADDRESS:{{ $service.port }} is not ready";
                  exit 1;
                fi;
              done
        {{- end }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ $injectorName }}-injector
          securityContext:
            {{- toYaml .securityContext | nindent 12 }}
          image: "{{- if and .image (hasKey .image "repository") }}{{ .image.repository }}{{- else if $.Values.global.imageRegistry }}{{ printf "%s/openbas/%s" $.Values.global.imageRegistry .name }}{{- else }}{{ printf "openbas/%s" .name }}{{- end }}:{{ if and .image (hasKey .image "tag") }}{{ .image.tag | default $.Chart.AppVersion }}{{ else }}{{ $.Chart.AppVersion }}{{ end }}"
          imagePullPolicy: {{ if and .image (hasKey .image "pullPolicy") }}{{ .image.pullPolicy }}{{ else }}IfNotPresent{{ end }}
          lifecycle:
            {{- with .lifecycle }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .envFromFiles }}
            {{- tpl (toYaml .envFromFiles) . | nindent 12 }}
            {{- end }}
            {{- if $injectorsGlobal.envFromFiles }}
            {{- tpl (toYaml $injectorsGlobal.envFromFiles) . | nindent 12 }}
            {{- end }}
          env:
            # Variables from secrets have precedence
            # Collector specific env from secrets
            {{- $envList := dict -}}
            {{- if .envFromSecrets }}
            {{- range $key, $value := .envFromSecrets }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            # Variables from configmap have precedence
            {{- if .envFromConfigMap }}
            {{- range $key, $value := .envFromConfigMap }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Add variables in plain text if they were not already added from secrets
            {{- if .env }}
            {{- range $key, $value := .env }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              value: {{ $value | quote }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Special handling for OPENBAS_URL which is constructed from other values
            {{- if not (hasKey $envList "OPENBAS_URL") }}
            {{- if eq $.Values.env.APP__BASE_PATH "/" }}
            - name: OPENBAS_URL
              value: "http://{{ include "openbas.fullname" $ }}-server:{{ $.Values.service.port }}"
            {{- else }}
            - name: OPENBAS_URL
              value: "http://{{ include "openbas.fullname" $ }}-server:{{ $.Values.service.port }}{{ $.Values.env.APP__BASE_PATH }}"
            {{- end }}
            {{- end }}
            # Special handling for OPENBAS_ADMIN_TOKEN which is constructed from other values
            {{- if and (not (hasKey $envList "OPENBAS_ADMIN_TOKEN")) $appAdminToken }}
            - name: OPENBAS_TOKEN
              value: {{ $appAdminToken }}
            {{- end }}
            # Injectors global env from secrets
            {{- if $injectorsGlobal.envFromSecrets }}
            {{- range $key, $value := $injectorsGlobal.envFromSecrets }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Injectors global env from configmap
            {{- if $injectorsGlobal.envFromConfigMap }}
            {{- range $key, $value := $injectorsGlobal.envFromConfigMap }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name }}
                  key: {{ $value.key | default $key }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
            # Injectors global env
            {{- if $injectorsGlobal.env }}
            {{- range $key, $value := $injectorsGlobal.env }}
            {{- if not (hasKey $envList $key) }}
            - name: {{ $key | upper }}
              value: {{ $value | quote }}
            {{- $_ := set $envList $key true }}
            {{- end }}
            {{- end }}
            {{- end }}
          volumeMounts:
            {{- with .volumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- with $injectorsGlobal.volumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .resources | nindent 12 }}
      terminationGracePeriodSeconds: {{ .terminationGracePeriodSeconds | default 30 }}
      volumes:
      {{- with .volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $injectorsGlobal.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- range $constraint := . }}
        - labelSelector:
            matchLabels:
              openbas.injector: {{ $injectorName }}
              {{- include "openbas.selectorLabels" $ | nindent 14 }}
          {{- toYaml $constraint | nindent 10 }}
        {{- end }}
      {{- end }}
      {{- with .dnsConfig }}
      dnsConfig:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .dnsPolicy }}
      dnsPolicy: {{ . }}
      {{- end }}
{{- end }}
{{- end }}
